---
import { Icon } from "astro-icon";

export interface Props {
	title: string;
	subtitle?: string | undefined;
	icon?: string | undefined;
	project_link: string;
	github_link?: string;
	description?: string;
	pinned?: boolean | undefined;
	fork?: string;
	languages?: string[] | undefined;
}

const { title, subtitle, icon, project_link, github_link, description, pinned, fork, languages } =
	Astro.props;

const randomDeg = Math.floor(Math.random() * 360) + "deg";
---

<article id={!fork ? title : title + "/fork"}>
	<div class:list={["card-container", { pinned: pinned }, { fork: fork }]}>
		<div class:list={["border-gradient", { "has-subtitle": subtitle }]}>
			<a href={!fork ? project_link : `#${title}`} title={title} class="main-link">
				<div class="titles">
					{icon && <img src={icon} alt={`${title} icon`} width="32px" height="32px" />}
					<h3>{title}</h3>
					{subtitle && <h4>{subtitle}</h4>}
				</div>

				{description && <p class="description">{description}</p>}
				{
					languages && (
						<div class="languages">
							{languages.map((lang) => (
								<p>{lang}</p>
							))}
						</div>
					)
				}
				{
					(github_link || fork) && (
						<div class="links">
							{(github_link || (github_link && fork)) && (
								<a
									href={github_link}
									title={"Github link for " + title}
									target="_blank"
								>
									<Icon name="codicon:github" />
								</a>
							)}
							{fork && (
								<a href={fork} title={"Fork link for " + title} target="_blank">
									<Icon name="codicon:repo-forked" />
								</a>
							)}
						</div>
					)
				}
			</a>
		</div>
	</div>
</article>

<style lang="scss" define:vars={{ randomDeg }}>
	article {
		width: 100%;
		container-type: inline-size;
		container-name: card-container;

		&:target {
			.border-gradient {
				outline: var(--dashed-outline);
			}
		}
	}
	.card-container {
		--gap: 1rem;

		--accent-gradient: linear-gradient(
			var(--randomDeg),
			var(--secondary-rgb),
			var(--tertiary-rgb) 50%,
			var(--text-rgb) 60%,
			var(--tertiary-rgb) 70%,
			var(--secondary-rgb)
		);

		--dashed-outline: dashed 3px var(--secondary-rgb);

		display: block;
		box-sizing: border-box;
		background-image: var(--accent-gradient);
		border-radius: 13px;
		margin: var(--gap);
		padding: 0;
		width: 650px;
		height: 160px;

		color: var(--text-rgb);
		font-size: 1.2rem;

		transition: padding 0.2s ease;

		* {
			box-sizing: border-box;
		}

		&.pinned {
			& .border-gradient {
				outline: 2px solid var(--secondary-rgb);
			}
		}

		.border-gradient {
			position: relative;
			padding: var(--gap);
			background-color: var(--primary-light-rgb);
			border-radius: 10px;
			width: 100%;
			height: 100%;
			overflow: hidden;

			transition: outline-width 0.1s ease;

			a {
				color: var(--text-rgb);
				text-decoration: none;
			}
			img,
			svg {
				color: var(--text-rgb);
				aspect-ratio: 1/1;
			}

			.titles {
				display: grid;
				grid-template-columns: 32px 1fr 100%;
				gap: var(--gap);
				align-items: center;
				margin-bottom: var(--gap);
				white-space: nowrap;

				* {
					margin: 0;
				}

				h3 {
					font-weight: bolder;
					text-decoration: underline 2px var(--secondary-rgb);
					text-underline-offset: 0.3rem;
				}
				h4 {
					font-weight: 500;
					color: var(--text-dark-gray-rgb);
				}
			}

			.description {
				margin: 0.5rem 0;
				font-size: 1.1rem;
				text-overflow: ellipsis;
				white-space: nowrap;
				overflow: hidden;
			}

			.languages {
				position: absolute;
				display: flex;
				bottom: var(--gap);
				left: var(--gap);
				gap: calc(var(--gap));
				font-size: 1rem;

				p {
					// margin-top: calc(var(--gap) / 2);
					margin-bottom: 0;
					background-color: var(--secondary-dark-rgb);
					padding: 0.5rem;
					border-radius: 0.5rem;
				}
			}

			.links {
				position: absolute;
				bottom: var(--gap);
				right: var(--gap);

				display: flex;
				gap: calc(var(--gap) / 2);

				.main-link {
					//Astro generate a unwanted duplication of the main link
					display: none;
				}

				a,
				button {
					display: inline;
					transition: all 0.2s ease-in-out;

					&:hover {
						transform: translateY(-2px);
					}
				}

				img,
				svg {
					width: 1.5rem;
					height: 1.5rem;
				}
			}

			&:has(> .main-link:focus-visible) {
				outline: var(--dashed-outline);
			}
		}

		&:hover {
			padding: 3px;

			.border-gradient {
				outline: 0px;
			}
			.links {
				bottom: -3px;
			}
		}
	}

	@container card-container (width < 650px) {
		article .card-container {
			width: 370px;
			height: 145px;
			font-size: 1rem;

			.border-gradient {
				img {
					width: 24px;
					height: 24px;
				}

				.titles {
					margin-bottom: calc(var(--gap) + 0.2rem);
				}

				.languages {
					font-size: 0.8rem;
				}
			}

			.border-gradient.has-subtitle {
				.titles {
					grid-template-columns: 24px 1fr;
					gap: calc(var(--gap) / 2);
				}

				.description {
					margin-top: calc(var(--gap) / -1.2);
				}
			}
		}
	}

	@container card-container (width < 370px) {
		article .card-container {
			width: 300px;
		}
	}
</style>
