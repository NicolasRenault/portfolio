---
export interface Props {
	top: string;
	left: string;
	rotate?: string;
}

let { top, left, rotate = "20deg" } = Astro.props;
---

<div class="blob-container" data-rotate={rotate}>
	<svg
		class="blob-gradient"
		class="blob"
		viewBox="0 0 400 400"
		width="900"
		height="900"
		xmlns="http://www.w3.org/2000/svg"
		xmlns:xlink="http://www.w3.org/1999/xlink"
		version="1.1"
	>
		<defs>
			<linearGradient
				gradientTransform="rotate(150, 0.5, 0.5)"
				x1="50%"
				y1="0%"
				x2="50%"
				y2="100%"
				id="gradient-svg"
			>
				<stop stop-color="var(--tertiary-rgb)" stop-opacity="1" offset="0%"></stop>
				<stop stop-color="var(--text-rgb)" stop-opacity="1" offset="40%"> </stop>
				<stop stop-color="var(--secondary-rgb)" stop-opacity="1" offset="100%"> </stop>
			</linearGradient><filter
				id="ffflux-filter"
				x="-20%"
				y="-20%"
				width="140%"
				height="140%"
				filterUnits="objectBoundingBox"
				primitiveUnits="userSpaceOnUse"
				color-interpolation-filters="sRGB"
			>
				<feTurbulence
					type="fractalNoise"
					baseFrequency="0.007 0.007"
					numOctaves="2"
					seed="132"
					stitchTiles="stitch"
					x="0%"
					y="0%"
					width="100%"
					height="100%"
					result="turbulence"></feTurbulence>
				<feGaussianBlur
					stdDeviation="100 50"
					x="0%"
					y="0%"
					width="100%"
					height="100%"
					in="turbulence"
					edgeMode="duplicate"
					result="blur"></feGaussianBlur>
				<feBlend
					mode="color-dodge"
					x="0%"
					y="0%"
					width="100%"
					height="100%"
					in="SourceGraphic"
					in2="blur"
					result="blend"></feBlend>
			</filter></defs
		>
		<g transform="translate(150 210)">
			<path
				d="M186.5 -99.7C229.8 -32.7 244.8 58.7 209 98.1C173.2 137.5 86.6 125 21.7 112.5C-43.3 100 -86.6 87.5 -113.4 53.3C-140.3 19 -150.7 -37 -129 -91.5C-107.4 -146 -53.7 -199 8.9 -204.2C71.6 -209.3 143.2 -166.7 186.5 -99.7"
				fill="url(#gradient-svg)"></path>
		</g>
	</svg>

	<script>
		const blobContainers = document.querySelectorAll(".blob-container");

		blobContainers.forEach((blobContainer) => {
			const rotate = blobContainer.dataset.rotate;

			if (rotate === "random") {
				blobContainer.style.setProperty("--rotate", `${Math.random() * 360}deg`);
			} else {
				blobContainer.style.setProperty("--rotate", rotate);
			}
		});
	</script>
</div>

<style lang="scss" define:vars={{ top, left }}>
	.blob-container {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		overflow: hidden;
		z-index: -10;
		filter: blur(30px);
		pointer-events: none;

		.blob-gradient {
			position: absolute;
			display: inline-block;
			top: var(--top);
			left: var(--left);
			rotate: var(--rotate);
			z-index: -1;
			opacity: 0.7;
			filter: blur(30px);
			pointer-events: none;
		}
	}
</style>
